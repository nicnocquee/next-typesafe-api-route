#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Command } from 'commander';

const program = new Command();

// Configure CLI options
program
  .name('generate-api-registry')
  .description('Generate a registry file that imports all API routes')
  .option(
    '-d, --dir <directory>',
    'Root directory to scan for route files',
    './app',
  )
  .option('-o, --output <file>', 'Output file path', './lib/api-registry.ts')
  .option('-v, --verbose', 'Enable verbose logging')
  .parse(process.argv);

const options = program.opts();

// Find all route files
function findRouteFiles(dir, routes = []) {
  try {
    if (!fs.existsSync(dir)) {
      console.error(`Directory does not exist: ${dir}`);
      return routes;
    }

    const entries = fs.readdirSync(dir, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);

      if (entry.isDirectory()) {
        findRouteFiles(fullPath, routes);
      } else if (
        entry.name === 'route.ts' ||
        entry.name === 'route.js' ||
        entry.name === 'route.tsx' ||
        entry.name === 'route.jsx'
      ) {
        // Skip the OpenAPI route itself
        if (fullPath.includes('api/docs/openapi')) continue;

        // Add to routes list
        routes.push(fullPath);
        if (options.verbose) {
          console.log(`Found route: ${fullPath}`);
        }
      }
    }

    return routes;
  } catch (error) {
    console.error(`Error scanning directory ${dir}:`, error);
    return routes;
  }
}

// Generate the registry file
function generateRegistryFile() {
  try {
    console.log(`Scanning for route files in ${options.dir}...`);
    const routes = findRouteFiles(options.dir);

    if (routes.length === 0) {
      console.warn(
        'No route files found. Make sure the directory path is correct.',
      );
    } else {
      console.log(`Found ${routes.length} route files.`);
    }

    const imports = routes
      .map((route) => {
        // Convert to posix path format (forward slashes)
        const importPath = route.replace(/\\/g, '/');
        // Remove extension from import path
        const importPathNoExt = importPath.replace(/\.[^.\/]+$/, '');
        // Remove leading ./ if present
        return `import('@/${importPathNoExt.replace(/^\.\//, '')}')`;
      })
      .join(',\n');

    // Create directories if they don't exist
    const outputDir = path.dirname(options.output);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    const fileContent = `
// This file is auto-generated by generate-api-registry of https://github.com/nicnocquee/next-typesafe-api-route. DO NOT EDIT.
// It imports all API routes to ensure they're registered in the OpenAPI registry.
// Next, create a route to generate and return the OpenAPI doc:
/*
// app/api/docs/openapi/route.ts
import { generateOpenApiDocument } from "next-typesafe-api-route";
import { getSharedRegistry, importApiRoutes } from "@/lib/api-registry";

export async function GET() {
  // Get the registry
  await importApiRoutes();
  const registry = getSharedRegistry();

  // Generate the OpenAPI document
  const openApiDoc = generateOpenApiDocument(
    {
      title: "My API",
      version: "1.0.0",
      description: "API documentation for my Next.js application",
    },
    registry
  );

  return Response.json(openApiDoc);
}
*/

import { OpenAPIRegistry } from "@asteasolutions/zod-to-openapi";

// Shared registry
// Use a singleton pattern with lazy initialization
let registry: OpenAPIRegistry | null = null;

export function getSharedRegistry(): OpenAPIRegistry {
  if (!registry) {
    registry = new OpenAPIRegistry();
  }
  return registry;
}

let routesImported = false;

// Function to import routes
export async function importApiRoutes() {
  if (routesImported) return;

  // Import routes dynamically
  await Promise.all([
    ${imports.trim()}
  ]);

  routesImported = true;
}
`;
    fs.writeFileSync(options.output, fileContent);
    console.log(
      `Generated registry file at ${options.output} with ${routes.length} routes.`,
    );
  } catch (error) {
    console.error('Error generating registry file:', error);
    process.exit(1);
  }
}

generateRegistryFile();
